
#
# generated by genmod v1.0
#
# style generic
#

package bp_s_generic;

# Use to customize behavior; would be better to add as parameters, but
# that might not be backward-compatible.  Remember to unset after use!
$titlefirst = 0;		# if true, put title before authors
$smartquotes = 0;		# if true, use ``...'' rather than "..."


$record_number = 0;

sub conv_generic {
  local(%can) = @_;
  $record_number++;

  # print STDERR "conv_generic fields: ", join(' ', keys %can), "\n";

  if (!defined $can{'CiteType'}) {
    &bib::gotwarn("required field CiteType is not defined");
    $can{'CiteType'} = 'misc';
  }

  local($date) = undef;
  if (defined $can{'Month'}) {
    local($mo) = &bp_util::output_month($can{'Month'}, 'short');
    if (defined $can{'Year'}) {
      $date = "$mo $can{'Year'}";
    } else {
      $date = $mo;
    }
  } else {
    $date = $can{'Year'} if defined $can{'Year'};
  }
  if (! defined($date)) {
    if (defined($can{'Note'}) && ($can{'Note'} =~ /to appear/i)) {
      $date = lcfirst($can{'Note'});
      undef $can{'Note'};
    }
  }

  local($pp, $wp) = (undef,undef);
  $pp = $can{'Pages'}      if defined $can{'Pages'};
  $wp = $can{'PagesWhole'} if defined $can{'PagesWhole'};
  if ( (!defined $wp) && (defined $pp) && ($pp !~ /-|${bib::cs_ext}2013|,/) ) {
    $wp = $pp;
    $pp = undef;
  }
  # set default type using the CiteType field
  $type = &generic_default_type($can{'CiteType'});
  if (! ($can{'CiteType'} eq $type)) {
    print STDERR "conv_generic: $can{'CiteType'} => $type\n";
  }

  # Initialize output string
  $str = '';
  $str .= "m1100";


  if      ($type eq 'article') {
    if (!defined $can{'Journal'}) {
      &bib::gotwarn("No Journal field in $type citation");
    }
    $str .= format_title_authors(%can);
    if (defined $can{'Journal'}) {
      $str .= "m2101$can{'Journal'}m2111, ";
    }
    $str .= format_editors_parens(%can);
    $str .= "vol. $can{'Volume'}, "      if defined $can{'Volume'};
    $str .= "no. $can{'Number'}, "       if defined $can{'Number'};
    $str .= "${date}, "                  if defined ${date};
    $str .= "pp. ${pp}, "                if defined ${pp};
    $str .= "$can{'Publisher'}, "        if defined $can{'Publisher'};
  } elsif ($type eq 'report') {
    $str .= format_title_authors(%can);
    $str .= "$can{'Organization'} "     if defined $can{'Organization'};
    if (defined $can{'ReportType'} || $can{'ReportNumber'}) {
      if (defined $can{'ReportType'}) {
	$str .= "$can{'ReportType'}";
      } else {
	$str .= "technical report";
      }
      $str .= " $can{'ReportNumber'}"    if defined $can{'ReportNumber'};
      $str .= ", ";
    }
    $str .= "$can{'School'}, "           if defined $can{'School'};
    $str .= "($can{'PubAddress'}), "     if defined $can{'PubAddress'};
    $str .= "${date}, "                  if defined ${date};
    $str .= "pp. ${pp}, "                if defined ${pp};
    $str .= "${wp} pages, "              if defined ${wp};
  } elsif ($type eq 'book') {
    $str .= format_title_authors(%can);
    $str .= format_editors_parens(%can);
    $str .= "vol. $can{'Volume'}, "      if defined $can{'Volume'};
    $str .= "pp. ${pp}, "                if defined ${pp};
    $str .= "$can{'Publisher'}, "        if defined $can{'Publisher'};
    $str .= "$can{'Edition'} ed., "      if defined $can{'Edition'};
    $str .= "${date}, "                  if defined ${date};
    $str .= "${wp} pages, "              if defined ${wp};
  } elsif ($type eq 'inproceedings') {
    if (!defined $can{'SuperTitle'}) {
      &bib::gotwarn("No SuperTitle field in $type citation");
    }
    $str .= format_title_authors(%can);
    if (defined $can{'SuperTitle'}) {
      $str .= "in m2101$can{'SuperTitle'}m2111, ";
    }
    $str .= format_editors_parens(%can);
    $str .= "($can{'PubAddress'}), "     if defined $can{'PubAddress'};
    $str .= "${date}, "                  if defined ${date};
    $str .= "pp. ${pp}, "                if defined ${pp};
    $str .= "$can{'Organization'}, "     if defined $can{'Organization'};
    if (defined $can{'Journal'}) {
      $str .= "published as m2101$can{'Journal'}m2111, ";
      $str .= "vol. $can{'Volume'}, "    if defined $can{'Volume'};
      $str .= "no. $can{'Number'}"       if defined $can{'Number'};
    }
  } elsif ($type eq 'inbook') {
    if (!defined $can{'SuperTitle'}) {
      &bib::gotwarn("No SuperTitle field in $type citation");
    }
    $str .= format_title_authors(%can);
    if (defined $can{'SuperTitle'}) {
      $str .= "in m2101$can{'SuperTitle'}m2111, ";
    }
    $str .= "vol. $can{'Volume'}, "      if defined $can{'Volume'};
    # Remove comma if Series but no Number.
    $str =~ s/, $//                      if defined $can{'Volume'} && defined $can{'Series'} && ! defined $can{'Number'};
    $str .= "no. $can{'Number'}"         if defined $can{'Number'};
    $str .= " of $can{'Series'}, "       if defined $can{'Series'};
    $str .= format_editors_parens(%can);
    $str .= "($can{'PubAddress'}), "     if defined $can{'PubAddress'};
    $str .= "${date}, "                  if defined ${date};
    $str .= "pp. ${pp}, "                if defined ${pp};
    $str .= "$can{'Organization'}, "     if defined $can{'Organization'};
  } elsif ($type eq 'thesis') {
    $str .= format_title_authors(%can);
    if (defined $can{'ReportType'} || $can{'ReportNumber'}) {
      if (defined $can{'ReportType'}) {
	# print STDERR "\$can{'ReportType'} = $can{'ReportType'}\n";
	if ($can{'ReportType'} eq "Ph.D.") {
	  $str .= "Ph.D. dissertation";
	} elsif ($can{'ReportType'} eq "Masters") {
	  $str .= "Masters thesis";
	} else {
	  $str .= "$can{'ReportType'}";
	}
      } else {
	$str .= "technical report";
      }
      $str .= " $can{'ReportNumber'}"    if defined $can{'ReportNumber'};
      $str .= ", ";
    }
#     if (...) {
#       $str .= "PhD dissertation, ";
#     } else
#       $str .= "Master's thesis, ";
#     }
    $str .= "$can{'Organization'} "      if defined $can{'Organization'};
    $str .= "$can{'School'}, "           if defined $can{'School'};
    $str .= "($can{'PubAddress'}), "     if defined $can{'PubAddress'};
    $str .= "${date}, "                  if defined ${date};
    $str .= "pp. ${pp}, "                if defined ${pp};
    $str .= "${wp} pages, "              if defined ${wp};
  } elsif ( ($type eq 'misc') || ($type eq 'unpublished') || ($type eq 'manual') || ($type eq 'avmaterial') || ($type eq 'proceedings') || ($type eq 'map') ) {
    $str .= format_title_authors(%can);
    if (defined $can{'Journal'}) {
      $str .= "m2101$can{'Journal'}m2111, ";
      $str .= "v$can{'Volume'}, "        if defined $can{'Volume'};
      $str .= "n$can{'Number'}, "        if defined $can{'Number'};
    }
    if (defined $can{'SuperTitle'}) {
      $str .= "in m2101$can{'SuperTitle'}m2111, ";
    }
    if (defined $can{'Editors'} && defined $can{'Authors'}) {
      local($tEditors);
      $tEditors = &bp_util::canon_to_name($can{'Editors'}, 'plain');
      $str .= "edited by $tEditors, ";
    }
    $str .= "$can{'Publisher'}, "        if defined $can{'Publisher'};
    $str .= "${date}, "                  if defined ${date};
    $str .= "pp. ${pp}, "                if defined ${pp};
    $str .= "${wp} pages, "              if defined ${wp};
  }

  $str =~ s/,("?)\s*$/$1./;
  if (defined($can{'Note'})
      && ($can{'Note'} =~ /^A previous version appeared/)) {
    undef $can{'Note'};
  }

  if (defined($can{'Note'})) {
    $str .= "  " . &bp_util::replace_tildes($can{'Note'});
    # add trailing period if necessary
    if ($str !~ /\.$/) {
      $str .= ".";
    }
  }
  if (defined $can{'Abstract'}) {
    $str .= "\nm1103m0103Abstract:  m0113\n$can{'Abstract'}m1113";
  }
  if (defined $can{'Keywords'}) {
    $str .= "\nm1103m0103Keywords:  m0113\n$can{'Keywords'}m1113";
  }
  if (defined $can{'Annotation'}) {
    $str .= "\nm1103m0103Annotation:  m0113\n$can{'Annotation'}m1113";
  }
  $str .= "m1110";

  $str .= "\n";

# print STDERR "conv_generic result = $str";

  $str;
}

sub format_title_authors {
  my %can = @_;
  $type = &generic_default_type($can{'CiteType'});

  my $usingeditors = 0;

  my $authors;
  if (defined $can{'Authors'}) {
    $authors = &bp_util::canon_to_name($can{'Authors'}, 'plain');
  } elsif (defined $can{'Editors'}) {
    $authors = &bp_util::canon_to_name($can{'Editors'}, 'plain');
    $usingeditors = 1;
  }
  my $title;
  if (defined $can{'Title'}) {
    if ($type eq 'book') {
      $title = "m2101$can{'Title'}m2111";
    } else {
      $title = dq($can{'Title'});
    }
  }

  my $result = "";
  if ($titlefirst) {
    if (defined($title)) {
      $result .= "$title";
    }
    if (defined($authors)) {
      if ($usingeditors) {
	$result .= " edited";
      }
      $result .= " by $authors";
    }
    $result .= ", ";
  } else {
    if (defined($authors)) {
      $result .= $authors;
      if ($usingeditors) {
	my $editors = $can{'Editors'};
	my $edname = ($editors =~ /$bib::cs_sep/) ? "eds." : "ed.";
	$result .= " ($edname)";
      }
      $result .= ", ";
    }
    if (defined($title)) {
      $result .= "$title, ";
    }
  }
  return $result;
}

sub format_editors_parens {
  my %can = @_;

  if (! defined $can{'Editors'}) {
    return "";
  }
  if (! defined $can{'Authors'}) {
    # the editors were used by format_title_authors
    return "";
  }
  my $editors = $can{'Editors'};
  my $edname = ($editors =~ /$bib::cs_sep/) ? "eds." : "ed.";
  my $tEditors = &bp_util::canon_to_name($editors, 'plain');
  return "($tEditors, ${edname}), ";
}


# stands for "double_quote"
sub dq {
  my ($str) = @_;
  if ($smartquotes) {
    return "${bib::cs_ext}201C$str${bib::cs_ext}201D";
  } else {
    return "\"$str\"";
  }
}


sub generic_default_type {
  local($citetype) = @_;
  local($type) = 'misc';

  if (defined $citetype) {
    if ($citetype =~ /^(article|report|book|inproceedings|inbook|misc|unpublished|manual|avmaterial|proceedings|thesis|map)$/) {
      $type = $citetype;
    } else {
      &bib::gotwarn("Type '$can{'CiteType'}' not recognized -- using default type 'misc'");
    }
  }
  $type;
}

1;
